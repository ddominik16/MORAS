class vint {
    field Array A;  
    field int size; 

    // zadatak 2 b
    constructor vint new(int n) {
        if (n < 0) {
            let size = 1;
        } else {
            let size = 1;
            while (n > 0) {
                let size = size * 2;
                let n = n - 1;
            }
        }
        let A = Array.new(size);
        return this;
    }

    // zadatak 2 a
    method int len() {
        return size;
    }

    // zadatak 2 c
    method void set(int k, int v) {
        if (((k > 0 | k = 0)) & k < size) {
            let A[k] = v;
        }
        return;
    }

    // zadatak 2 c
    method int get(int k) {
        if (((k > 0 | k = 0)) & k < size) {
            return A[k];
        }
        return 0; // ako ne postoji
    }

    // zadatak 2 d
    method void resize(int m) {
        var int newSize, i;
        var Array B;

        if (m < 0) {
            let newSize = 1;
        } else {
            let newSize = 1;
            while (m > 0) {
                let newSize = newSize * 2;
                let m = m - 1;
            }
        }

        let B = Array.new(newSize);
        let i = 0;

        while (i < size & i < newSize) {
            let B[i] = A[i]; 
            let i = i + 1;
        }

        let A = B;
        let size = newSize;

        return;
    }

    // zadatak 2 e
    function boolean is_eq(vint v1, vint v2) {
        var int i;

        if (~(v1.len() = v2.len())) {
            return false;
        }

        let i = 0;
        while (i < v1.len()) {
            if (~(v1.get(i) = v2.get(i))) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }

    // zadatak 2 f
    function boolean elems(vint v1, vint v2) {
        var int i, j, count;
        var boolean found;

        if (~(v1.len() = v2.len())) {
            return false;
        }

        let i = 0;
        while (i < v1.len()) {
            let found = false;
            let j = 0;
            while (j < v2.len()) {
                if (v1.get(i) = v2.get(j)) {
                    let found = true;
                    let j = v2.len(); 
                }
                let j = j + 1;
            }
            if (~found) {
                return false;
            }
            let i = i + 1;
        }
        return true;
    }
}
